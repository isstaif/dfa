يعتمد عمل البرنامج على وجود صف NFA وصف DFA

هذا الملف يقوم بتوصيف سريع لعمل أهم الإجرائيات في هذين الصفين.

إجرائيات الصف NFA
إجرائية add_keyword_nfa(keyword)
تقوم هذه الإجرائية بإضافة كلمة مفتاحية إلى الأوتومات المنتهي الحتمي. حيث يقابل كل حرف من الكلمة المفتاحية حالة، ويتم ربط كل حالة بالانتقالات اللازمة، كما يتم إضافة انتقال من الحالة البدائية (وهي الحالة 0) إلى أول كلمة.

إجرائية normalize
هي الإجرائية المسؤولة عن تحويل جدول الانتقال الخاص بالأوتومات المنتهي اللاحتمي إلى جدول انتقالات الأوتومات المنتهي الحتمي المقابل. حيث يعتمد عملها على عمل إجرائيتين الأولى هي إجرائية إيجاد الحالات المركبة (قمنا بتسميتها إجرائية التفجير للفكاهة bombing)، وإجرائية الدمج، والتي تقوم بحساب الانتقالات المقابلة لهذه الحالة المركبة و

إجرائية def bombing (state)
هي إجرائية تستدعى على أحد حالات الأوتومات اللامنتهي الحتمي NFA وتقوم بالبحث عن الانتقالات إلى الحالات المركبة (مثلاً الحالة [0,1]) وتقوم باستدعاء إجرائية الدمج التي تقوم بدورها.

إجرائية def mergeing(array_of_states)
يمرر لها مجموعة من الحالات التي تمثل حالة مركبة في الأوتومات اللامنتهي الحتمي، وتقوم بدمجها في جدول الانتقالات الجديد كحالة جديدة يتعامل معها البرنامج كحالة واحدة. فتقوم هذه الإجرائية بحساب الانتقالات المقابلة لهذه الحالة الجديدة من خلال دمج الانتقالات الخاصة بالحالات المفردة التي تتكون منها.

إجرائيات الصف DFA
إجرائية الباني initialize(s0, finals=[])
يمرر لها الحالة البدائية ومجموعة الحالات النهائية الخاصة بالأوتومات المنتهي الحتمي.

إجرائية حساب الانتقالات transition(&block)
يمرر لهذه الإجرائية كتلة تعليمات توضح عملية انتقالات الأوتومات. نقوم بتمرير جدول انتقالات لهذه الإجرائية. تستخدم هذه الإجرائية من قبل الصف DFA لحساب الانتقالات اللازمة عند دخل معين.

إجرائية الانتقال (أو الأكل!) eat(a)
يمرر لهذه الإجرائية محرف الدخل، ويقوم بإعادة نتيجة منطقية، تكون صحيحة عندما تكون الحالة التي انتقل إليها الأوتومات حالة نهائية.

إجرائية final?
تعيد نتيجة منطقية صحيحة عندما يكون الأوتومات في أحد حالاته النهائية.


يحوي المجلد صورة تحوي اختبار على البرنامج على ثلاث كلمات مفتاحية math man cool مع صورة توضح الأوتومات الذي أنشأه البرنامج

البرنامج مكتوب بلغة برمجة Ruby
